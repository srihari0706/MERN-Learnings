Backend structure :
project/
â”œâ”€â”€ config/
â”‚   â””â”€â”€ db.js         ðŸ‘‰ MongoDB connection
â”œâ”€â”€ models/
â”‚   â””â”€â”€ Student.js    ðŸ‘‰ Schema/Model
â”œâ”€â”€ index.js          ðŸ‘‰ Starts the server, loads routes
â”œâ”€â”€ routes/
â”‚   â””â”€â”€ auth.js       ðŸ‘‰ Handles /login route
â”œâ”€â”€ controllers/
â”‚   â””â”€â”€ authController.js ðŸ‘‰ Contains login logic


--------------------------------------------------------------
Initial Things to do :

Initialise package.json:
npm init -y

Install Express and Nodemon :
npm install express
npm install -g nodemon  // nice server 
npm install mongoose // for mongo db 

To run Server or Any File:
nodemon index.js

Add this in package.json to make the project as ES6:
"type": "module"    

--------------------------------------------------------------
Returing in a api :
1, Returning API data    =>	res.status().json({...})
2, Sending plain text    =>	res.send("text")
3, Sending HTML          =>	res.send("<h1>Hello</h1>")
4, Ending response early =>	res.sendStatus(404)
5, To just send Json     => res.json({ message: "Hello, Sri!" });
--------------------------------------------------------------
Mongoose :
=> used for connecting to DB (MONGO) :
=> use mongoose to conect to db and thats simple refer code config/db

Schema :
=> Schema sets the data which is got from the UI and restricts extra data from inserting into db
eg : 
const UserListSchema = new mongoose.Schema({
    name: String,
    pass: String
});

Model :
=> using that schemas models are created . 
=> Export that models to use that and run query in it
eg :
const UserList = mongoose.model('UserList', UserListSchema , 'Users');
=> here inside the bracket :
     The first UserList is the alias name for that collection choosen 
     Second is the schema 
     Third is the collection that to be used
--------------------------------------------------------------
