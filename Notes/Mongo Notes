MONGO DB BASICS : yt (BRO CODE) : https://youtu.be/c2M-rlkkT5o?si=e5At_f9MG3pS6HHs

INSTALLATION of MONGO DB  : https://www.mongodb.com/try/download/community
INSTALLATION MONGO DB SHELL (mongosh) : https://www.mongodb.com/try/download/shell => you need to set enviroment variable for this. (sometimes that wont work it thats not working create u need to do some changes like copying and pasting a function in Powershell or WindowsPowershell in folder  User/Username/Document/Powershell or WindowsPowershell .Take assistance from chat GPT )

CONNECTING MONGOSH:
To establish a connection to our database open  mongo db shell and enter "mongosh"
To exit enter "exit"

RUNNING MONGOSH IN VSCODE :
But Instad of mongosh use VSCode by doing below step or watch tutorial at exact time stamp :
yt : https://youtu.be/c2M-rlkkT5o?si=Eqn2ph6FllpSpUoM&t=363
Step -1 :
Install MongoDB Extension => after installing u will see the mongo symbol in ui of vs code
Step -2 :
After that click that icon and click connect via connection string and add local host to it "mongodb://localhost:27017"
Step-3 :
To open mongo db terminal , right click that conection and click launch "mongoDB SHell"


--------------------------------------------------------------------
Basic Terms:
1 ,
DOCUMENT : It is a group of Field value pairs which represent a object. 
eg :
{
    name : "sri",
    age : "1000"
}

2, 
COLLECTION : Its a group of 1 or more documents

3,
DATABASE : Its a group of 1 or more collections

SIMPLE TERMS relation to SQL :
SQL   Mongo
Rows  Documents
table Collection
--------------------------------------------------------------------
Data types in mongo DB :
1,Strings => can be "" or ''
2,Integer => only stores intgers not a decimal
3,double => stores only decimals
4,booleans => true , false
5,dateObjects => This is date object :
               this is done by  
               1, new Date() => if no params that takes the current time in UTC
               2, new Date(2023-01-30T00:00:00) => u can also pass params // UTC
6,null => no value , just has a placeholder which can be inserted later
7,arrays => just a normal js array [1,2,3]
8,nexted Documents => this is a object in js ie, {}.

usage example
({ name : "sri", age : 100, cgpa : 8.9, isHostel : false, dob : new Date(2003-07-06), courses : ['js','ts','mern'], address : { streeet :"gandhi", pin : "641001"}})
--------------------------------------------------------------------
FIND : (methods are in the bottom of this notes)
   Syntax : db.collectionName.find({query} , {projection})
=> find is used to find a document as the name sugest and it has 2 parameters
   1, what to find (query)
   2, what are the values u need to return (projection)
   db.students.find({what to find} , {what values should be returned})

eg :  db.students.find({} , {name : true}) 
      => this returns all value names with ids as a array of jsons in the  students.
      => if u need only ids use :
      db.students.find({} , {name : true , _id : false }) 
      => this finds all of the documents to our query :
      db.students.find({name : "sri"})


Note : 1, If u desnt pass what values need that will give u the entire object
       2, 0 denoted false and 1 denotes true
--------------------------------------------------------------------
UPDATE : (methods are in the bottom of this notes)
    Syntax : db.collectionName.updateOne({filter} , {what to update})
    here => query : where to update and the 2nd curly is what to update
    eg :
    db.students.updateOne({name : 'sri'} , {$set:{age : 11}}) 
    => the above updates 1 doc if u need to update many use updateMany
    db.students.updateMany({name : 'sri'} , {$set:{age : 11}}) 

    You can also update multiple fields by :
    * db.students.updateMany({name : 'sri'} , {$set:{age : 11 , city : "chenai"}}) 
    * if theres many documents that u have serached but u entered updateOne , it find only the first document and update it

    
    => set is used to set a new value or use to update the old value 
    => unset is used to remove the key in that document
    unset EG :
    db.students.updateOne( {_id : ObjectId('6863b878ba43914395748a60')}, { $unset:{isMass : ''}}) 

    Note : On the above u can give value any thing , but mongo ignores that value , so best practive is to keep the value empty while unseting

    => To update all docs use :
    db.students.updateMany({ },{$set:{age : 7}}) 

    => There is also a functionality to set a field if that key is not prensent , ask that in chat gpt 
--------------------------------------------------------------------
Indexes :
    => Index will be fast for fetching but will be slow for insert ,update ,delete  and also takes a lot of space
    => _id is a default (static) index in every MongoDB collection. (IMPORTANT)
    => Normally for fetching documenst mongo will do linear search ie loops the data once . But if u use index that will only find the serached one without linear search , ie fast than before . 
    => But there is a catch , by adding a lot of index will takes up extra space and also slows down CRUD operations.
    => The index will be created for all the documents of the given fields in the create index , but if u add a lot of fields then it will slow u the CRUD
        db.students.createIndex({name : 1}) 
        OP: name_1 => this name_1 is the index name created 
        => In the above 1 is to create index in accending and vice versa
    => To get the indexes use :
    db.students.getIndexes()
    => To delete a index use 
    db.students.dropIndex("indexname")
--------------------------------------------------------------------
Collections :
1, show collections => this shows all the collections
2, db.createCollection('collectionname', {capped : true , size : 10000000 , max : 100} , {autoIndexId : true} )
    => here the capped is used to set the ax size of the colections as 10000000 and also the max documents can  be inserted is 100 . then if u give false to the autoIndexId then no _id (index) will be generated
3, db.collectionname.drop()
--------------------------------------------------------------------
MQL (similar to querries): NOTE : Response : { ok: 1 } => here 1 : succes ; 0 : failed  
[NOTE : u can create update delete db , collection , document , insert document , collection  etc (anything) in the MangoDB Compass easily and u can view the db in the compass]

Note : In the below the school is DB , the students is Collection .
1, To show all the dbs present :
   show dbs
2, To use a DB  :
   use DBname => access only if a db is present else it will create a new one with the same name
3, If the Db doesnt exist then that same 2nd commen is used to create a DB :
   use NewDBName 
   NOTE :
    MongoDB does not create the database until you:
            a,Insert a document into it, or
            b,Create a collection
4, To create a collection  :
    db.createCollection("students")  => This creates a collection named students
    Response : { ok: 1 } => here 1 : succes ; 0 : failed
5, To drop(delete) a db :
    db.dropDatabase() => u neeed to eneter this while u are inside that database which u wanted to delete
6, To insert a single document in the collection u need to use : ( this is similar to objects in Java Script)
    db.students.insertOne({ name : "SriGod" , age : "1000"}) 
    => here students is the colection name , if the collection is not present it will create a new colection inside of that table.
    => The JSON Like data inside of the {} is called a document 
7, To insert many documents inside a Collection use : ( this is similar to    array of objects in Java Script) :
    db.students.insertMany([{name : "ram" , age : 19} , {name : "vimala" , age : 42}])
7, To return all documents with in a collection :
    db.students.find() => here the students  is the collection
   To return a doc with specific id :
     db.students.find({ _id: ObjectId('6864e0d7a483580af4748a5f') })
8, To sort and get a document :
    db.sort.find().sort({name : 1})
    => This sorts by the name in alphabetical asending order 
    => To sort by descending alphabetical order use -1 
    => Therefore if 1 asedning for all datatype is 1 and -1 for decending
9, To limit the number of documents returned in find use :
    db.students.find().limit(10)
    => This limits upto 10 documents
10, To combine both multiple methods use like 
    db.students.find().sort({name:1}).limit(1)      
    => This sort the name in ascending gets the first name  
11, To find a specific document use : (This is similar to where in sql)
    db.students.find({name : "sri"})
    => gets the name when its sri . this only sort like using "==" in js.
    => You can also add multiple filters like  below , this will filter name as sri and age as 100 :
    db.students.find({name : "sri" , age : 100})
12, To know more about this see the top sub heading 'FIND'
    Find also allows u to select a particular value to be returned :
    db.students.find({} , {name : true})
    => this returns all value names with ids as a array of jsons in the  students.
    => if u need only ids use :
    db.students.find({} , {name : true , _id : false })
13, To update 1 or many Document use :
    db.students.updateOne({name : 'sri'} , {$set:{age : 11}}) 
    => the above updates 1 doc if u need to update many use updateMany
    db.students.updateMany({name : 'sri'} , {$set:{age : 11}}) 
    => You can also update multiple fields by :
    db.students.updateMany({name : 'sri'} , {$set:{age : 11 , city : "chenai"}}) 
14 , To remove a key while update use unset:
    db.students.updateOne( {_id : ObjectId('6863b878ba43914395748a60')}, { $unset:{isMass : ''}}) 
15 , To update all docs use :
    db.students.updateMany({ },{$set:{age : 7}}) 
16 , Delete a document :
    db.students.deleteOne({name : 'laryy'})
    => similarly there is Many to delete muliple documents
    You can also delete a document which does not have a field in it or vice versa :
    eg:
    db.students.deleteMany({isHostel : {$exists : false}}) 
    => the above deletes a adocument which doesnot have isHostel field
17 , To get the execution stats use :
    db.students.find().explain('executionStats)


--------------------------------------------------------------------
Operators  :
=> Operators are denoted with $ sign 
Some Operators :
1, set 
2, unset 
3, exists
    db.students.deleteMany({isHostel : {$exists : false}}) 
Conditional Operators :
4, ne => not equal
    db.students.find({name : {$ne : 'sri1'}})
5, lt => less than . 
    db.students.find({age : {$lt : 4}})
6, lte => less than equal
7, gt => greater than
8, gte => greater than equals
9, Range :(Overloaded Operators)
    db.students.find({age : {$lt : 4 , $gt:2}}) => this return the docs les than 4 and greter than 3
10, in => here u give a array of needed and that will returns all matched
    db.students.find({name : {$in : ['sri2']}})
11, nin =>(not in) here u give a array of values and that will returns all not matched
    db.students.find({name : {$in : ['sri2']}})
Logical Operators : These logical operators must be in a array []
12, and => normal and operator
    db.students.find({ $and: [ { class: 10 }, { name: 'sri2' }, { age: { $lte: 2 } } ] })
13, not => similar to normal not 
    db.students.find({age : {$not : {$gt : 6} } })
14, nor => returns the doc if all are false (opposite to and)
    db.students.find({ $nor: [ { class: 10 }, { name: 'sri2' }, { age: { $lte: 2 } } ] })
15, or => normal or operator
    db.students.find({ $or: [ { class: 10 }, { name: 'sri2' }, { age: { $lte: 2 } } ] })

--------------------------------------------------------------------



